{"version":3,"sources":["logo.svg","pages/DevicesDetail.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","TextArea","Input","request","require","DevicesDetail","props","contentChange","e","setState","content","target","value","phoneChange","phone","console","log","state","nameChange","name","submit","length","postCheckMsg","message","warning","url","method","form","device","JSON","stringify","err","res","body","success","id","brand","model","refer","protectRefer","location","installDate","qualityCode","qualityDate","lastCheckDate","lastRepairDate","errorTimes","lastTime","window","qs","responseData","parse","code","data","this","className","Date","toDateString","style","margin","onChange","placeholder","autoSize","minRows","maxRows","marginRight","whiteSpace","marginBottom","type","onClick","React","Component","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.96415e8d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport './detail.css'\nimport {Input, Button, message} from 'antd'\n\nconst {TextArea} = Input;\nconst request = require('request');\n/**\n *WebStorm create by chenhong on 2020/4/20\n *\n */\nexport default class DevicesDetail extends React.Component {\n\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            content: '',\n            phone: '',\n            device: {\n                id: \"\", //设备id\n                brand: \"\", //品牌\n                model: \"\", //型号\n                refer: \"\", //所属公司\n                protectRefer: \"\", //维保单位\n                phone: \"\", //联系电话\n                location: \"\", //安装位置\n                installDate: \"\", //安装日期 2020-04-17\n                qualityCode: \"\", //质检合格证编号\n                qualityDate: \"\", //发证日期 2020-04-18\n                lastCheckDate: \"\", //最近巡检日期 2020-04-21\n                lastRepairDate: \"\", //最近维修日期 2020-04-21\n                errorTimes: 0, //电梯故障发生次数\n                lastTime: \"\", //持续运行时间\n            },\n            name: ''\n        }\n\n    }\n\n    contentChange = e => {\n        this.setState({\n            content: e.target.value\n        })\n    };\n\n    phoneChange = e => {\n        this.setState({\n            phone: e.target.value\n        }, () => {\n            console.log(this.state.phone);\n        })\n    };\n\n    nameChange = e => {\n        this.setState({\n            name: e.target.value\n        })\n    };\n\n    submit = () => {\n        if (this.state.content.length === 0 || this.state.phone.length === 0 || this.state.name.length === 0) {\n            message.warning('请完善个人联系方式');\n            return\n        }\n        this.postCheckMsg()\n    };\n\n    postCheckMsg = () => {\n        request({\n            url: 'http://49.235.43.17:3001/check',\n            method: 'POST',\n            form: {\n                content: this.state.content,\n                phone: this.state.phone,\n                device: JSON.stringify(this.state.device)\n            }\n        }, (err, res, body) => {\n            message.success('提交成功')\n        })\n    };\n\n    componentDidMount() {\n        console.log(window.location);\n        request('http://49.235.43.17:3001/devicesById', {\n            method: 'GET',\n            qs: {\n                id: 'OA3529345035'\n            }\n        }, (err, res, body) => {\n            let responseData = JSON.parse(body);\n            if (responseData.code === 200) {\n                this.setState({\n                    device: responseData.data[0]\n                }, () => {\n                    console.log(this.state.device)\n                })\n            }\n        })\n    }\n\n    render() {\n        const device = this.state.device;\n        return (<div className='parent'>\n            <div className='table'>\n                <div className='child-grey'>\n                    <span className='child-title'>电梯编号</span>\n                    <span className='child-content'>{device.id}</span>\n                </div>\n                <div className='child-white'>\n                    <span className='child-title'>电梯品牌</span>\n                    <span className='child-content'>{device.brand}</span>\n                </div>\n                <div className='child-grey'>\n                    <span className='child-title'>电梯型号</span>\n                    <span className='child-content'>{device.model}</span>\n                </div>\n                <div className='child-white'>\n                    <span className='child-title'>产权单位</span>\n                    <span className='child-content'>{device.refer}</span>\n                </div>\n                <div className='child-grey'>\n                    <span className='child-title'>维保单位</span>\n                    <span className='child-content'>{device.protectRefer}</span>\n                </div>\n                <div className='child-white'>\n                    <span className='child-title'>联系电话</span>\n                    <span className='child-content'>{device.phone}</span>\n                </div>\n                <div className='child-grey'>\n                    <span className='child-title'>电梯安装位置</span>\n                    <span className='child-content'>{device.location}</span>\n                </div>\n                <div className='child-white'>\n                    <span className='child-title'>电梯安装日期</span>\n                    <span className='child-content'>{new Date(device.installDate * 1000).toDateString()}</span>\n                </div>\n                <div className='child-grey'>\n                    <span className='child-title'>质检合格证编号</span>\n                    <span className='child-content'>{device.qualityCode}</span>\n                </div>\n                <div className='child-white'>\n                    <span className='child-title'>发证日期</span>\n                    <span className='child-content'>{new Date(device.qualityDate * 1000).toDateString()}</span>\n                </div>\n                <div className='child-grey'>\n                    <span className='child-title'>最近巡检日期</span>\n                    <span className='child-content'>{new Date(device.lastCheckDate * 1000).toDateString()}</span>\n                </div>\n                <div className='child-white'>\n                    <span className='child-title'>最近维修日期</span>\n                    <span className='child-content'>{new Date(device.lastRepairDate * 1000).toDateString()}</span>\n                </div>\n                <div className='child-grey'>\n                    <span className='child-title'>电梯故障发生次数</span>\n                    <span className='child-content'>{device.errorTimes}</span>\n                </div>\n                <div className='child-white'>\n                    <span className='child-title'>电梯运行时长</span>\n                    <span className='child-content'>{device.lastTime}</span>\n                </div>\n            </div>\n            我要报故障\n            <div style={{\n                margin: 24\n            }}>\n\n            <TextArea\n                value={this.state.content}\n                onChange={this.contentChange}\n                placeholder=\"故障内容描述\"\n                autoSize={{minRows: 5, maxRows: 5}}\n            />\n            </div>\n\n            <div className='phone-parent'>\n                <a style={{marginRight: 48, whiteSpace: 'nowrap'}}>手机号码</a>\n                <Input onChange={this.phoneChange} value={this.state.phone} placeholder=\"请输入联系手机号\"/>\n            </div>\n            <div className='phone-parent'>\n                <a style={{marginRight: 36, whiteSpace: 'nowrap'}}>联系人姓名</a>\n                <Input onChange={this.nameChange} value={this.state.name} placeholder=\"请输入联系人姓名\"/>\n            </div>\n            <div style={{marginBottom: 24}}>\n                <Button type='primary' onClick={() => {\n                    this.submit()\n                }}>提交</Button>\n            </div>\n        </div>)\n    }\n}\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {Button} from 'antd';\nimport DevicesDetail from './pages/DevicesDetail'\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <DevicesDetail/>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}